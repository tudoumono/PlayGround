import json
import os
from create_PowerPoint_Separate import lambda_handler # メインのファイルからlambda_handlerを読み込む

# --- ここからがテスト用の設定 ---

# 1. プロンプトから実際に出力された slide_data 文字列
#    三重クォート(""")で囲むことで、複数行の文字列をそのまま変数に格納できます。
slide_data_string = """
[
    {
        "type": "title",
        "title": "文書の管理・活用における3つの要素",
        "date": "2025.08.22",
        "notes": "本日は、文書の管理と活用における重要な3つの観点についてお話しします。これらの要素を統合することで、企業全体の情報活用を最適化するCDS、すなわちコーポレート・ドキュメント・システムという概念をご紹介します。"
    },
    {
        "type": "section",
        "title": "文書管理の3つの観点",
        "sectionNo": 1,
        "notes": "文書管理を効果的に行うためには、大きく分けて3つの重要な観点があります。それぞれ「標準化」「電子化」「共有化」です。"
    },
    {
        "type": "cards",
        "title": "文書管理の3つの要素",
        "subhead": "「標準化」「電子化」「共有化」の3つの要素が、統合的な文書管理の鍵を握る",
        "columns": 3,
        "items": [
            {
                "title": "標準化",
                "desc": "文書管理、デザイン、入力の[[標準]]を定めることで、文書に統一性をもたせる"
            },
            {
                "title": "電子化",
                "desc": "文書のメディアを紙から[[電子]]に切り替え、作成・生産・伝達を容易にする"
            },
            {
                "title": "共有化",
                "desc": "データベースやネットワークを活用し、文書を[[誰でも]]利用できる状態にする"
            }
        ],
        "notes": "まず、一つ目の「標準化」は、文書のルールを統一することで、誰もが同じ品質の文書を作成できるようにすることです。二つ目の「電子化」は、紙媒体からデジタルへ移行し、効率性を高めます。そして、三つ目の「共有化」は、必要な人がいつでも情報にアクセスできる環境を構築することです。この3つの要素が相互に連携することで、文書管理はより効果的になります。"
    },
    {
        "type": "compare",
        "title": "各要素に必要な取り組み",
        "leftTitle": "各要素",
        "rightTitle": "必要な準備・ルール",
        "leftItems": [
            "標準化",
            "電子化",
            "共有化"
        ],
        "rightItems": [
            "マニュアルの整備、教育の徹底",
            "作成スペースの確保、ツールの導入",
            "管理・運営のためのルール策定"
        ],
        "notes": "これらの3つの要素を推進するためには、それぞれに準備やルールが必要です。例えば、「標準化」のためには、具体的なマニュアルの整備や従業員への教育が不可欠です。「電子化」には、適切なツールの導入や、電子文書を扱うための物理的・システム的な環境整備が必要です。そして、「共有化」を成功させるためには、誰がどのような範囲で利用できるかといった管理・運営のルールを明確に定める必要があります。"
    },
    {
        "type": "section",
        "title": "CDS（コーポレート・ドキュメント・システム）",
        "sectionNo": 2,
        "notes": "これらの3つの要素を統合的に捉え、企業全体の文書を戦略的に管理・活用するシステムを、私たちはCDS、すなわちコーポレート・ドキュメント・システムと名付けます。"
    },
    {
        "type": "diagram",
        "title": "CDSの全体像",
        "subhead": "3つの要素が連携し、統合的な文書管理を実現する",
        "lanes": [
            {
                "title": "標準化",
                "items": [
                    "文書管理ルール",
                    "マニュアル整備"
                ]
            },
            {
                "title": "電子化",
                "items": [
                    "メディアの電子化",
                    "ツール導入"
                ]
            },
            {
                "title": "共有化",
                "items": [
                    "データベース",
                    "ネットワーク"
                ]
            }
        ],
        "notes": "この図は、標準化、電子化、共有化という3つのレーンが連携することで、CDSが成り立っている様子を示しています。それぞれの要素が独立しているのではなく、互いに影響し合いながら、企業全体の情報資産を最大限に活用する仕組みを作り上げます。CDSは単なる文書管理ツールではなく、企業の情報ガバナンスを強化する戦略的なシステムなのです。"
    },
    {
        "type": "closing",
        "notes": "まとめとして、文書管理は「標準化」「電子化」「共有化」の3つの要素を統合的に考えることが重要であり、これを「CDS」として推進することで、より生産的で効率的な企業活動が実現できるということをお伝えしました。ご清聴ありがとうございました。"
    }
]
"""

# Lambdaに渡されるeventオブジェクトの形式を模倣する
mock_event = {
    'slideData': slide_data_string.strip() # .strip()で前後の余分な改行を削除
}

# 2. 擬似的なcontextオブジェクト（通常はNoneでOK）
mock_context = None

# --- ここでテストを実行 ---
if __name__ == '__main__':
    print("--- Lambdaハンドラのローカルテストを開始します ---")
    
    # 3. 作成した擬似データを使ってlambda_handlerを呼び出す
    response = lambda_handler(mock_event, mock_context)
    
    # 4. Lambdaからの返り値（レスポンス）を表示
    print("\n--- テスト完了 ---")
    print("Lambdaからのレスポンス:")
    # ensure_ascii=False で日本語が文字化けしないように表示
    print(json.dumps(response, indent=2, ensure_ascii=False))

    # statusCodeが200なら成功
    if response.get('statusCode') == 200:
        print("\n✅ テストは成功しました！")
        body = json.loads(response.get('body', '{}'))
        print(f"   生成されたファイルパス: {body.get('filePath')}")
    else:
        print("\n❌ テストでエラーが発生しました。")